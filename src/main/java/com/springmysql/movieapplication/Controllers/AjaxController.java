package com.springmysql.movieapplication.Controllers;

import com.springmysql.movieapplication.Bookmarks.Director;
import com.springmysql.movieapplication.Bookmarks.DirectorRepository;
import com.springmysql.movieapplication.Bookmarks.Writer;
import com.springmysql.movieapplication.Bookmarks.WriterRepository;
import com.springmysql.movieapplication.DTO.UserDTO;
import com.springmysql.movieapplication.DTO.UserMovieDTO;
import com.springmysql.movieapplication.Movie.Movie;
import com.springmysql.movieapplication.User.User;
import com.springmysql.movieapplication.User.UserRepository;
import com.springmysql.movieapplication.Exceptions.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.*;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@RestController
public class AjaxController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private DirectorRepository directorRepository;
    private WriterRepository writerRepository;

    public AjaxController(UserRepository userRepository,DirectorRepository directorRepository, WriterRepository writerRepository ) {
        this.userRepository = userRepository;
        this.directorRepository = directorRepository;
        this.writerRepository = writerRepository;
    }

    @RequestMapping(value = "/signin")
    public String checkUser(@RequestBody User user) {
        List<User> users = (List<User>) userRepository.findAll();
        boolean isUser = false;
        for (User appuser: users) {
            if (user.getEmail().equals(appuser.getEmail())) {

                if (user.getPassword().equals(appuser.getPassword())) {
                    isUser = true;
                    return "Authenticated User";
                }
            }
        }
        if (!isUser) {
            return "Invalid Credentials";
        }
        return "Invalid Credentials";
    }

    //Controller that saves the user to the db
    @RequestMapping(value = "/register")
    public String getSearchResultViaAjax(@RequestBody UserDTO userDTO) {
        List<User> users = (List<User>) userRepository.findAll();
        boolean foundUser = false;
        for (User appuser: users) {
            if (userDTO.getEmail().equals(appuser.getEmail())) {
                foundUser = true;
                return "There is an account with that email address:" + userDTO.getEmail();
            }
        }
        if (!foundUser) {

            User user = new User();
            user.setName(userDTO.getName());
            user.setEmail(userDTO.getEmail());
            user.setPassword(userDTO.getPassword());
            userRepository.save(user);
            return "Successful";
        }
        return "User already exists!";
    }

    @PostMapping(value = "/bookmarks")
    public String addBookmarks(@RequestBody UserMovieDTO userMovieDTO)  throws ResourceNotFoundException {

        String imdbID = userMovieDTO.getImdbId();
        String userEmail = userMovieDTO.getEmail();
        String directorName = userMovieDTO.getDirectorName();
        String writerName = userMovieDTO.getWriterName();

        List<User> users = (List<User>) userRepository.findAll();
        Integer userId = 0;
        boolean foundUser= false;

        for (User appuser: users) {
            if(userEmail.equals(appuser.getEmail()))  {
                userId = appuser.getId();
                foundUser = true;
            }
        }
        if (foundUser) {

            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("User not found for this email :: " + userEmail));

            Set<Movie> myBookmarks =  user.getLikedMovies();
            boolean moviefound = false;
            for (Movie movie: myBookmarks) {
                if(imdbID.equals(movie.getImdbId())) {
                    moviefound = true;
                    return "Movie already exists";
                }
            }
            if(!moviefound) { //if movie is not already in bookmarks
                Movie movieUser = new Movie(imdbID);
                user.getLikedMovies().add(movieUser);


                String[] movieDirectors = directorName.split(",");
                Set<String> directorList = new HashSet<>();
                for (String name : movieDirectors) { //divide it's director
                    String clearName = name.split("\\(")[0].trim();
                    System.out.println("Director Name: "+ clearName);
                    directorList.add(clearName);
                }

                boolean dirFound = false;
                List<Director> directors = (List<Director>) directorRepository.findAll();
                for (String name:directorList) {
                    for (Director dir:directors) {
                        if (dir.getName().toLowerCase().trim().equals(name.toLowerCase().trim())) {//if the director already on the db update his movies
                            dirFound = true;
                            dir.getMovies().add(movieUser);
                            directorRepository.save(dir);
                        }
                    }
                    if (!dirFound){ //else create a new Director
                        Director director = new Director(name);
                        director.getMovies().add(movieUser);
                        directorRepository.save(director);
                    }
                }

                String[] movieWriters = writerName.split(",");
                Set<String> writerList = new HashSet<>();
                for (String name : movieWriters) { //seperate it's writer
                    String clearName = name.split("\\(")[0].trim();
                    System.out.println("Writer Name: "+ clearName);
                    writerList.add(clearName);
                }

                boolean writerFound = false;
                List<Writer> writers = (List<Writer>) writerRepository.findAll();
                for (String name:writerList) {
                    for (Writer writer:writers) {
                        if (writer.getName().toLowerCase().trim().equals(name.toLowerCase().trim())) {//if the writer already on the db update his movies
                            writerFound = true;
                            writer.getMovies().add(movieUser);
                            writerRepository.save(writer);
                        }
                    }
                    if (!writerFound){ //else create a new writer
                        Writer writer = new Writer(name);
                        writer.getMovies().add(movieUser);
                        writerRepository.save(writer);
                    }
                }
                userRepository.save(user);//Save bookmarks, Writers, Directors in the db
                return "Successful";
            }
        }
        return "404: User not found!";
    }

    @GetMapping(value = "/bookmarks")
    public String showBookmarks(@RequestParam String userEmail)  throws ResourceNotFoundException {

        List<User> users = (List<User>) userRepository.findAll();
        //String userEmail = userData.getUserEmail();
        Integer userId = 0;
        boolean foundUser= false;
        Set<Movie> likedMovies = null ;
        for (User appuser: users) {
            if(userEmail.equals(appuser.getEmail()))  {
                userId = appuser.getId();
                foundUser = true;
            }
        }
        if (foundUser) {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("User not found for this email :: " + userEmail));
            likedMovies = user.getLikedMovies();

            String result="";
            for (Movie movie:likedMovies) { //make a string uncluding all the imdb ids of user's bookmarks
                result +=  movie.getImdbId() + ",";
            }
            return result; //send it to the front-end
        }
        return "not done";
    }

    @GetMapping(value = "/search")
    public String searchBookmarks(@RequestParam String searchedName,@RequestParam String userEmail,@RequestParam String selectValue)  throws ResourceNotFoundException {
        System.out.println("Name: "+searchedName);
        System.out.println("Email: "+userEmail);
        List<User> users = (List<User>) userRepository.findAll();
        Integer userId = 0;
        boolean foundUser= false;
        Set<Movie> likedMovies = null ;
        for (User appuser: users) {
            if(userEmail.equals(appuser.getEmail()))  {
                userId = appuser.getId();
                foundUser = true;
            }
        }
        if (foundUser) {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("User not found for this email :: " + userEmail));
            likedMovies = user.getLikedMovies();

            String result="";
            if (selectValue.equals("director")) {//if User search for Director
                Set<Director> directors;

                for (Movie mv:likedMovies) {// search in user Bookmarks
                    directors = mv.getDirectors();
                    for (Director dir: directors) {
                        if (dir.getName().trim().toLowerCase().equals(searchedName.trim().toLowerCase())) {
                            System.out.println("Movie: "+mv.getImdbId());
                            System.out.println("Name: "+dir.getName());
                            System.out.println("Name: "+searchedName);
                            result +=  mv.getImdbId() + ",";//store the imdbId's of the movies
                        }
                    }
                }
            }
            if (selectValue.equals("writer")) {//if User search for Writer
                Set<Writer> writers;

                for (Movie mv:likedMovies) {// search in user Bookmarks
                    writers = mv.getWriters();
                    for (Writer writer: writers) {
                        if (writer.getName().trim().toLowerCase().equals(searchedName.trim().toLowerCase())) {
                            System.out.println("Movie: "+mv.getImdbId());
                            System.out.println("Name: "+writer.getName());
                            System.out.println("Name: "+searchedName);
                            result +=  mv.getImdbId() + ",";//store the imdbId's of the movies
                        }
                    }
                }
            }

            System.out.println("Result: "+result);
            return result;//Return the imdbId's of the movies
        }
        return "not done";
    }
}
