package com.springmysql.movieapplication.Controllers;

import com.springmysql.movieapplication.DTO.UserDTO;
import com.springmysql.movieapplication.DTO.UserMovieDTO;
import com.springmysql.movieapplication.DTO.UserEmailDTO;
import com.springmysql.movieapplication.Movie.Movie;
import com.springmysql.movieapplication.User.User;
import com.springmysql.movieapplication.User.UserRepository;
import com.springmysql.movieapplication.Exceptions.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Set;

@RestController
public class AjaxController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    public AjaxController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @RequestMapping(value = "/signin")
    public String checkUser(@RequestBody User user) {
        List<User> users = (List<User>) userRepository.findAll();
        boolean isUser = false;
        for (User appuser: users) {
            if (user.getEmail().equals(appuser.getEmail())) {

                if (user.getPassword().equals(appuser.getPassword())) {
                    isUser = true;
                    return "Authenticated User";
                }
            }
        }
        if (!isUser) {
            return "Invalid Credentials";
        }
        return "Invalid Credentials";
    }

    //Controller that saves the user to the db
    @RequestMapping(value = "/registration")
    public String getSearchResultViaAjax(@RequestBody UserDTO userDTO) {
        List<User> users = (List<User>) userRepository.findAll();
        boolean foundUser = false;
        for (User appuser: users) {
            if (userDTO.getEmail().equals(appuser.getEmail())) {
                foundUser = true;
                return "There is an account with that email address:" + userDTO.getEmail();
            }
        }
        if (!foundUser) {

            User user = new User();
            user.setName(userDTO.getName());
            user.setEmail(userDTO.getEmail());
            user.setPassword(userDTO.getPassword());
            userRepository.save(user);
            return "Successful";
        }
        return "User already exists!";
    }

    @RequestMapping(value = "/addBookmarks")
    public String addBookmarks(@RequestBody UserMovieDTO userMovieDTO)  throws ResourceNotFoundException {

        String imdbID = userMovieDTO.getImdbId();
        String userEmail = userMovieDTO.getEmail();

        List<User> users = (List<User>) userRepository.findAll();
        Integer userId = 0;
        boolean foundUser= false;

        for (User appuser: users) {
            if(userEmail.equals(appuser.getEmail()))  {
                userId = appuser.getId();
                foundUser = true;
            }
        }
        if (foundUser) {

            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("User not found for this email :: " + userEmail));

            Set<Movie> myBookmarks =  user.getLikedMovies();
            boolean moviefound = false;
            for (Movie movie: myBookmarks) {
                if(imdbID.equals(movie.getImdbId())) {
                    moviefound = true;
                    return "Movie already exists";
                }
            }
            if(!moviefound) {
                Movie movieUser = new Movie(imdbID);
                user.getLikedMovies().add(movieUser);
                userRepository.save(user);
                return "Successful";
            }
        }
        return "404: User not found!";
    }

    @RequestMapping(value = "/showBookmarks")
    public String showBookmarks(@RequestBody UserEmailDTO userData)  throws ResourceNotFoundException {

        List<User> users = (List<User>) userRepository.findAll();
        String userEmail = userData.getUserEmail();
        Integer userId = 0;
        boolean foundUser= false;
        Set<Movie> likedMovies = null ;
        for (User appuser: users) {
            if(userEmail.equals(appuser.getEmail()))  {
                userId = appuser.getId();
                foundUser = true;
            }
        }
        if (foundUser) {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("User not found for this email :: " + userEmail));
            likedMovies = user.getLikedMovies();

            String result="";
            for (Movie movie:likedMovies) {
                result +=  movie.getImdbId() + ",";
            }
            return result;
        }
        return "not done";
    }
}
